import { Octokit } from 'octokit';
import dotenv from 'dotenv';
import { ScrapedImage } from '../scrapers/image-scraper';

// Load environment variables
dotenv.config();

// Initialize Octokit with GitHub token
const octokit = new Octokit({
  auth: process.env.GITHUB_TOKEN
});

/**
 * Creates a GitHub issue with attached images
 * @param title Issue title
 * @param body Initial issue body text
 * @param images Array of scraped images to include in the issue
 * @param repoOwner Owner of the repository
 * @param repoName Name of the repository
 * @returns URL of the created issue
 */
export const createIssueWithImages = async (
  title: string,
  body: string,
  images: ScrapedImage[],
  repoOwner: string,
  repoName: string
): Promise<string> => {
  try {
    // Format images in Markdown
    const imagesMarkdown = images.map(image => {
      // Create image tag with alt text
      return `![${image.alt}](${image.url})
      
*Source: ${image.sourceUrl}*
      
---`;
    }).join('\n\n');
    
    // Create full issue body with images
    const fullBody = `${body}
    
## Scraped Images
    
${imagesMarkdown}
    
*Generated by scrape-images-for-issues*`;

    // Create the issue
    const response = await octokit.request('POST /repos/{owner}/{repo}/issues', {
      owner: repoOwner,
      repo: repoName,
      title: title,
      body: fullBody,
      headers: {
        'X-GitHub-Api-Version': '2022-11-28'
      }
    });

    // Return the issue URL
    return response.data.html_url;
  } catch (error) {
    console.error('Error creating GitHub issue:', error);
    throw error;
  }
};
