import { Octokit } from 'octokit';
import { ScrapedImage } from '../scrapers/image-scraper';
import { GitHubError, ConfigError } from '../utils/errors';
import { logger } from '../utils/logger';
import { config } from '../utils/config';

/**
 * Initialize Octokit with GitHub token
 * @returns Octokit instance
 * @throws ConfigError if GitHub token is not available
 */
export const getOctokit = (): Octokit => {
  const { githubToken } = config.getConfig();
  
  if (!githubToken) {
    throw new ConfigError('GitHub token is required', 'GITHUB_TOKEN');
  }
  
  return new Octokit({
    auth: githubToken
  });
};

/**
 * Format images into markdown content
 * @param images Array of scraped images
 * @returns Markdown formatted string
 */
export const formatImagesMarkdown = (images: ScrapedImage[]): string => {
  if (images.length === 0) {
    return '*No images found*';
  }
  
  return images.map(image => {
    // Create image tag with alt text
    return `![${image.alt}](${image.url})
    
*Source: ${image.sourceUrl}*
    
---`;
  }).join('\n\n');
};

/**
 * Creates a GitHub issue with attached images
 * @param title Issue title
 * @param body Initial issue body text
 * @param images Array of scraped images to include in the issue
 * @param repoOwner Owner of the repository
 * @param repoName Name of the repository
 * @returns URL of the created issue
 * @throws GitHubError on API error
 * @throws ConfigError on configuration error
 */
export const createIssueWithImages = async (
  title: string,
  body: string,
  images: ScrapedImage[],
  repoOwner: string,
  repoName: string
): Promise<string> => {
  logger.info(`Creating GitHub issue in ${repoOwner}/${repoName}`);
  
  try {
    // Validate parameters
    if (!repoOwner) {
      throw new GitHubError('Repository owner is required');
    }
    
    if (!repoName) {
      throw new GitHubError('Repository name is required');
    }
    
    // Get Octokit instance
    const octokit = getOctokit();
    
    // Format images in Markdown
    const imagesMarkdown = formatImagesMarkdown(images);
    logger.debug(`Formatted ${images.length} images for issue body`);
    
    // Create full issue body with images
    const fullBody = `${body}
    
## Scraped Images
    
${imagesMarkdown}
    
*Generated by scrape-images-for-issues*`;

    logger.debug('Sending request to GitHub API');
    // Create the issue
    const response = await octokit.request('POST /repos/{owner}/{repo}/issues', {
      owner: repoOwner,
      repo: repoName,
      title: title,
      body: fullBody,
      headers: {
        'X-GitHub-Api-Version': '2022-11-28'
      }
    });

    const issueUrl = response.data.html_url;
    logger.info(`Successfully created issue: ${issueUrl}`);
    
    // Return the issue URL
    return issueUrl;
  } catch (error) {
    if (error instanceof GitHubError || error instanceof ConfigError) {
      logger.error(error.message, error);
      throw error;
    }
    
    // Handle error from Octokit
    if (error instanceof Error && 'status' in error) {
      const statusCode = (error as any).status || 500;
      logger.error(`GitHub API error (${statusCode}): ${error.message}`, error);
      throw new GitHubError(
        error.message, 
        statusCode, 
        { owner: repoOwner, repo: repoName },
        error
      );
    }
    
    // Handle other errors
    logger.error('Error creating GitHub issue', error);
    throw new GitHubError(
      'Failed to create GitHub issue', 
      undefined, 
      { owner: repoOwner, repo: repoName },
      error as Error
    );
  }
};
